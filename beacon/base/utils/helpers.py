# -*- coding: utf-8 -*-
# Standard Library
import datetime

# Third Party Stuff
import uuid

from dictdiffer import diff
from django.forms.models import model_to_dict


def get_diff_of_changes(dict_one, dict_two):
    """
    Method to add customization to native "diff" method of "dictdiffer" package.
    """

    def _get_formatted_diff(diff_generator):
        """
        Method to custom format of the diff generated by `dictdiffer` package.

        :param diff_generator: Generator object returned from `dictdiffer.diff` method
        :return: list of diff changes. For example:
        [
          {
            "change field": "phone",
            "old value": "+19128887777",
            "new value": "+19128888888"
          }
        ]
        """
        changes = []
        for change in diff_generator:
            # Each change is a tuple of ('change', key, (old value, new value))
            # change[0] can be 'change', 'add', or 'remove', but in our case
            # attributes are neither added nor removed from model objects at runtime,
            # so `add` or `remove` are ideally not possible.
            if change[0] == "change":
                changes.append(
                    {
                        f"{change[0]} field": change[1],
                        "old value": change[2][0],
                        "new value": change[2][1],
                    }
                )
            else:
                # In case change[0] is `add` or `remove`, then do not customize format.
                changes.append(change)
        return changes

    diff_obj = diff(dict_one, dict_two)
    return _get_formatted_diff(diff_obj)


def model_to_json_serializable_dict(model_obj, fields=None, exclude=None):
    """
    Method to convert Model objects to dict. It is an extention of
    django.forms.models.model_to_dict. It ensures all values are JSON Serializable
    by converting them to their string equivalent.

    :param model_obj: Model object to convert into dictionary
    :param fields: (optional) if given, only these fields are included in the result
    :param exclude: (optional) if given, these fields will not be included in the result
    """
    if not model_obj:
        return {}

    model_dict = model_to_dict(model_obj, fields=fields, exclude=exclude)
    json_serializable_dict = model_dict.copy()
    # If values are not JSON Serializable, convert objects to their string equivalent
    datatypes_to_convert_to_string = (
        uuid.UUID,
        datetime.datetime,
    )
    for k, v in model_dict.items():
        if isinstance(v, datatypes_to_convert_to_string):
            json_serializable_dict[k] = str(v)
    return json_serializable_dict
