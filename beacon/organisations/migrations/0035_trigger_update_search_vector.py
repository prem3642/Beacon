# -*- coding: utf-8 -*-
# Generated by Django 3.2.8 on 2022-01-18 11:16

from django.contrib.postgres.search import SearchVector
from django.db import migrations


def compute_search_vector(apps, schema_editor):
    Organisation = apps.get_model("organisations", "Organisation")
    Organisation.objects.update(
        search_vector=SearchVector("title", "location", "alternate_names")
    )


class Migration(migrations.Migration):

    dependencies = [
        ("organisations", "0034_auto_20220118_1113"),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
            CREATE FUNCTION update_trigger() RETURNS trigger AS $$
            begin
            new.search_vector :=
                setweight(to_tsvector('pg_catalog.english', coalesce(new.title,'')), 'A') ||
                setweight(to_tsvector('pg_catalog.english', coalesce(new.location,'')), 'A') ||
                setweight(to_tsvector('pg_catalog.english', coalesce(array_to_string(new.alternate_names,' '), '')), 'A');
            return new;
            end
            $$ LANGUAGE plpgsql;
            CREATE TRIGGER search_vector_trigger
            BEFORE INSERT OR UPDATE
            ON organisation
            FOR EACH ROW EXECUTE PROCEDURE
            update_trigger();
            UPDATE organisation SET search_vector = NULL;
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS search_vector_trigger
            ON organisation;
            """,
        ),
        migrations.RunPython(
            compute_search_vector, reverse_code=migrations.RunPython.noop
        ),
    ]
